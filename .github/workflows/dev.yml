name: Development CI

on:
  push:
    branches:
      - dev
    paths:
      - '**.go'
      - 'deployment.yaml'
  pull_request:
    branches:
      - dev
    types:
      - opened
      - reopened
      - synchronize

jobs:
  # linting:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: '1.20' # Adjust this to your Go version

  #     - name: Install linters
  #       run: |
  #         go install golang.org/x/lint/golint@latest # Install golint
  #         go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest # Optional: Install golangci-lint
  #         export PATH=$PATH:$(go env GOPATH)/bin

  #     - name: Run Golint
  #       run: golint ./...

  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup Node 20.x
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 20.x
  #         cache: npm
  #     - run: npm install
  #     - run: npm run test

  deploy:
    runs-on: ubuntu-latest

    # needs: [linting]
    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up OpenShift CLI
      - name: Install OpenShift CLI
        run: |
          curl -L https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz | tar -xz -C /usr/local/bin
          oc version

      - name: Log in to OpenShift
        run: oc login --server=${{ secrets.OPENSHIFT_URL }} --token=${{ secrets.OPENSHIFT_TOKEN }}

      - name: Create/Update Secrets
        run: |
          oc create secret generic azure-storage-secret-schedule \
            --from-literal=AZURE_AccountName=${{secrets.AZURE_AccountName}} \
            --from-literal=AZURE_AccountKey=${{secrets.AZURE_AccountKey}} \
            --from-literal=AZURE_EndpointSuffix=${{secrets.AZURE_EndpointSuffix}} \
            --from-literal=AZURE_TableEndpoint=${{secrets.AZURE_TableEndpoint}} \
            --from-literal=HTTP_PLATFORM_PORT=${{secrets.HTTP_PLATFORM_PORT}} \
            --from-literal=MAP_API_URL=${{secrets.MAP_API_URL}} \
            --from-literal=AZURE_CONNECTION_STRING=${{secrets.AZURE_CONNECTION_STRING}}

      # Step 5: Build and Push Docker Image
      - name: Build and push Docker image
        run: |
          docker build -t earlybirdreal/sail-schedule-api:${{ github.sha }} .
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login --username ${{ secrets.DOCKER_ID }} --password-stdin
          docker push earlybirdreal/sail-schedule-api:${{ github.sha }}

      # Step 6: Deploy to OpenShift
      - name: Update deployment.yml
        run: |
          sed -i "s|image: earlybirdreal/sail-schedule-api:.*|image: earlybirdreal/sail-schedule-api:${{ github.sha }}|" deployment.yaml
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add deployment.yaml
          git commit -m "Update deployment.yaml"
          git push